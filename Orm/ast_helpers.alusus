@merge module Rows {
    def modifierKeywordTranslations: Map[String, String];

    function generateVarNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr) {
        generateStrings(Spp.astMgr.getClassVarNames(parent, modifierKwd, modifierKeywordTranslations));
    }

    function generateColumnNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr) {
        generateStrings(getColumnNames(parent, modifierKwd));
    }

    function getColumnNames (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[String] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[String];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0
            and Spp.astMgr.findModifierForElement(elements(i), modifierKwd, modifierKeywordTranslations)~ptr == 0 {
                continue;
            }
            result.add(getColumnName(elements(i)));
        }
        return result;
    }

    function getColumnName (var: ref[Core.Basic.TiObject]): String {
        def modifier: ref[Core.Basic.TiObject](
            Spp.astMgr.findModifierForElement(var, "column", modifierKeywordTranslations)
        );
        if modifier~ptr == 0 return Spp.astMgr.getDefinitionName(var);
        def params: Array[String];
        Spp.astMgr.getModifierStringParams(modifier, params);
        if params.getLength() > 0 {
            return params(0);
        } else {
            return Spp.astMgr.getDefinitionName(var);
        }
    }

    function getVars (parent: ref[Core.Basic.TiObject], modifierKwd: CharsPtr): Array[ref[Core.Basic.TiObject]] {
        def elements: Array[ref[Core.Basic.TiObject]] = Spp.astMgr.findElements(
            (ast elementType == "var"),
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        def result: Array[ref[Core.Basic.TiObject]];
        def i: Int;
        for i = 0, i < elements.getLength(), ++i {
            if modifierKwd != 0
            and Spp.astMgr.findModifierForElement(elements(i), modifierKwd, modifierKeywordTranslations)~ptr == 0 {
                continue;
            }
            result.add(elements(i));
        }
        return result;
    }

    function generateStrings (strs: Array[String]) {
        def i: Int;
        for i = 0, i < strs.getLength(), ++i {
            Spp.astMgr.insertAst(
                (ast Srl.String("{{str}}")),
                Srl.Map[Srl.String, ref[Core.Basic.TiObject]]().set(Srl.String("str"), TiStr(strs(i)))
            );
        }
    }

    function getVarModifiers (
        var: ref[Core.Basic.TiObject],
        modsKeywords: ref[Array[String]],
        modsParams: ref[Array[Array[String]]]
    ) {
        modsKeywords = getElementModifierKeywords(var);

        def j: Int;
        for j = 0, j < modsKeywords.getLength(), ++j {
            modsParams.add(getElementModifierParams(var, modsKeywords(j)));
        }
    }

    function getElementModifierKeywords (element: ref[Core.Basic.TiObject]): Array[String] {
        def modifiers: ref[Core.Basic.Containing](Spp.astMgr.getModifiers(element));
        def i: Int;
        def results: Array[String];
        if modifiers~ptr != 0 {
            for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
                def kwd: String = Spp.astMgr.getModifierKeyword(modifiers.getElement(i));
                def translatedKwd: String = modifierKeywordTranslations(kwd);
                if translatedKwd == "" translatedKwd = kwd;
                results.add(translatedKwd);
            }
        }
        return results;
    }

    function getElementModifierParams (element: ref[Core.Basic.TiObject], modName: CharsPtr): Array[String] {
        def modifier: ref[Core.Basic.TiObject](
            Spp.astMgr.findModifierForElement(element, modName, modifierKeywordTranslations)
        );
        if modifier~ptr != 0 {
            def params: Array[String];
            Spp.astMgr.getModifierStringParams(modifier, params);
            return params;
        } else return Array[String]();
    }

    func getTableName (classAst: ref[Core.Basic.TiObject]): String {
        def modifier: ref[TiObject](Spp.astMgr.findModifierForElement(classAst, "model", modifierKeywordTranslations));
        if modifier~ptr == 0 {
            Spp.buildMgr.raiseBuildNotice("ROWS1001", 1, classAst);
            return String("MISSING_TABLE_NAME");
        }
        def modifierParams: Array[ref[TiObject]];
        if not Spp.astMgr.getModifierParams(modifier, modifierParams) or modifierParams.getLength() < 1 {
            Spp.buildMgr.raiseBuildNotice("ROWS1006", 1, modifier);
            return String("MISSING_TABLE_NAME");
        }
        def tableNameLiteral: ref[Ast.StringLiteral](dynCastRef[modifierParams(0), Ast.StringLiteral]);
        if tableNameLiteral~ptr == 0 {
            Spp.buildMgr.raiseBuildNotice("ROWS1007", 1, modifierParams(0));
            return String("MISSING_TABLE_NAME");
        }
        return tableNameLiteral.value.value;
    }
}

